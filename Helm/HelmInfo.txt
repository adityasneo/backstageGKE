Helm helps you manage Kubernetes applications â€” Helm Charts help you define, install, and upgrade even the most complex Kubernetes application

Key Components
1.Helm chart
2.Config Values
3.Helm Releases

Helm Repos
https://artifacthub.io/

The Chart File Structure
A chart is organized as a collection of files inside of a directory. The directory name is the name of the chart (without versioning information). Thus, a chart describing WordPress would be stored in a wordpress/ directory.

Inside of this directory, Helm will expect a structure that matches this:

wordpress/
  Chart.yaml          # A YAML file containing information about the chart
  LICENSE             # OPTIONAL: A plain text file containing the license for the chart
  README.md           # OPTIONAL: A human-readable README file
  values.yaml         # The default configuration values for this chart
  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file
  charts/             # A directory containing any charts upon which this chart depends.
  crds/               # Custom Resource Definitions
  templates/          # A directory of templates that, when combined with values,
                      # will generate valid Kubernetes manifest files.
  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes
Helm reserves use of the charts/, crds/, and templates/ directories, and of the listed file names. Other files will be left as they are.

Helm commands
https://helm.sh/docs/helm/
helm Repo
helm install
helm list
helm status
helm uninstall

Install helm
https://helm.sh/docs/intro/install/
helm version

helm search hub backstage
helm repo ls
helm search repo backstage
helm ls
helm ls --all-namespaces
helm uninstall backstage --keep-history
helm upgrade
helm history backstage -n backstage
ls -ltra